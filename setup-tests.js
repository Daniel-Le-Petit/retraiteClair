/**
 * Configuration des Tests Automatis√©s
 * 
 * Ce script configure l'environnement de test pour le simulateur
 */

const fs = require('fs');
const { exec } = require('child_process');
const path = require('path');

class TestSetup {
  constructor() {
    this.projectRoot = process.cwd();
    this.testDir = path.join(this.projectRoot, 'tests');
  }

  async checkPrerequisites() {
    console.log('üîç V√©rification des pr√©requis...');
    
    // V√©rifier Node.js
    const nodeVersion = process.version;
    console.log(`‚úÖ Node.js version: ${nodeVersion}`);
    
    // V√©rifier npm
    try {
      const { stdout } = await this.execCommand('npm --version');
      console.log(`‚úÖ npm version: ${stdout.trim()}`);
    } catch (error) {
      console.log('‚ùå npm non trouv√©');
      return false;
    }
    
    // V√©rifier que l'application peut d√©marrer
    console.log('üöÄ V√©rification du d√©marrage de l\'application...');
    try {
      const { stdout } = await this.execCommand('npm start --version');
      console.log('‚úÖ Application configur√©e');
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier l\'application');
    }
    
    return true;
  }

  async installDependencies() {
    console.log('üì¶ Installation des d√©pendances de test...');
    
    const dependencies = [
      'puppeteer@^21.0.0',
      'readline-sync@^1.4.10'
    ];
    
    for (const dep of dependencies) {
      try {
        console.log(`Installing ${dep}...`);
        await this.execCommand(`npm install ${dep} --save-dev`);
        console.log(`‚úÖ ${dep} install√©`);
      } catch (error) {
        console.log(`‚ùå Erreur lors de l'installation de ${dep}:`, error.message);
      }
    }
  }

  async createTestStructure() {
    console.log('üìÅ Cr√©ation de la structure de test...');
    
    // Cr√©er le dossier tests
    if (!fs.existsSync(this.testDir)) {
      fs.mkdirSync(this.testDir, { recursive: true });
      console.log('‚úÖ Dossier tests cr√©√©');
    }
    
    // Copier les fichiers de test
    const testFiles = [
      'test-automation.js',
      'test-manual.js',
      'package-test.json'
    ];
    
    for (const file of testFiles) {
      const sourcePath = path.join(this.projectRoot, file);
      const destPath = path.join(this.testDir, file);
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`‚úÖ ${file} copi√©`);
      }
    }
  }

  async createTestScripts() {
    console.log('üìù Cr√©ation des scripts de test...');
    
    const packageJsonPath = path.join(this.projectRoot, 'package.json');
    let packageJson = {};
    
    if (fs.existsSync(packageJsonPath)) {
      packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    }
    
    // Ajouter les scripts de test
    packageJson.scripts = packageJson.scripts || {};
    packageJson.scripts['test:automated'] = 'node test-automation.js';
    packageJson.scripts['test:manual'] = 'node test-manual.js';
    packageJson.scripts['test:all'] = 'npm run test:automated && npm run test:manual';
    packageJson.scripts['test:setup'] = 'node setup-tests.js';
    
    // Sauvegarder le package.json
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ Scripts de test ajout√©s au package.json');
  }

  async createTestConfig() {
    console.log('‚öôÔ∏è Cr√©ation de la configuration de test...');
    
    const config = {
      testConfig: {
        baseUrl: 'http://localhost:3000',
        timeout: 30000,
        headless: false,
        viewport: { width: 1280, height: 720 }
      },
      testCases: [
        {
          name: "Mode Simplifi√© - Cas Standard",
          data: { salaireBrut: "5000", tempsPartiel: "60", surcoteDecote: "0" },
          expected: { salaireNet: 3900, pensionProgressive: 702, revenuTotal: 3702 }
        }
      ],
      scenarios: [
        {
          name: "Sc√©nario 40%",
          expected: { salairePartiel: 1560, pensionProgressive: 977.34, revenuTotal: 2537.34 }
        }
      ]
    };
    
    const configPath = path.join(this.testDir, 'test-config.json');
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    console.log('‚úÖ Configuration de test cr√©√©e');
  }

  async createTestRunner() {
    console.log('üèÉ Cr√©ation du test runner...');
    
    const testRunner = `#!/usr/bin/env node
/**
 * Test Runner - Simulateur Retraite Progressive
 */

const { exec } = require('child_process');
const path = require('path');

class TestRunner {
  constructor() {
    this.projectRoot = process.cwd();
    this.results = [];
  }

  async runCommand(command) {
    return new Promise((resolve, reject) => {
      exec(command, (error, stdout, stderr) => {
        if (error) {
          reject(error);
        } else {
          resolve({ stdout, stderr });
        }
      });
    });
  }

  async startApplication() {
    console.log('üöÄ D√©marrage de l\'application...');
    try {
      // D√©marrer l'application en arri√®re-plan
      const startProcess = exec('npm start');
      console.log('‚úÖ Application d√©marr√©e');
      
      // Attendre que l'application soit pr√™te
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      return startProcess;
    } catch (error) {
      console.log('‚ùå Erreur lors du d√©marrage:', error.message);
      throw error;
    }
  }

  async runAutomatedTests() {
    console.log('ü§ñ Ex√©cution des tests automatis√©s...');
    try {
      const { stdout } = await this.runCommand('node test-automation.js');
      console.log(stdout);
      return true;
    } catch (error) {
      console.log('‚ùå Erreur dans les tests automatis√©s:', error.message);
      return false;
    }
  }

  async runManualTests() {
    console.log('üë§ Ex√©cution des tests manuels...');
    try {
      const { stdout } = await this.runCommand('node test-manual.js');
      console.log(stdout);
      return true;
    } catch (error) {
      console.log('‚ùå Erreur dans les tests manuels:', error.message);
      return false;
    }
  }

  async runAllTests() {
    console.log('üß™ D√âMARRAGE DES TESTS COMPLETS');
    console.log('==============================');
    
    let appProcess = null;
    
    try {
      // D√©marrer l'application
      appProcess = await this.startApplication();
      
      // Ex√©cuter les tests automatis√©s
      const automatedPassed = await this.runAutomatedTests();
      
      // Ex√©cuter les tests manuels
      const manualPassed = await this.runManualTests();
      
      // R√©sum√©
      console.log('\\nüìä R√âSUM√â FINAL');
      console.log('================');
      console.log(\`Tests automatis√©s: \${automatedPassed ? '‚úÖ R√©ussis' : '‚ùå √âchou√©s'}\`);
      console.log(\`Tests manuels: \${manualPassed ? '‚úÖ R√©ussis' : '‚ùå √âchou√©s'}\`);
      
      if (automatedPassed && manualPassed) {
        console.log('\\nüéâ TOUS LES TESTS SONT R√âUSSIS !');
        console.log('‚úÖ Le simulateur est pr√™t pour le d√©ploiement');
      } else {
        console.log('\\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â');
        console.log('‚ùå Des corrections sont n√©cessaires');
      }
      
    } catch (error) {
      console.log('‚ùå Erreur g√©n√©rale:', error.message);
    } finally {
      if (appProcess) {
        appProcess.kill();
        console.log('üõë Application arr√™t√©e');
      }
    }
  }
}

// Ex√©cution
async function main() {
  const runner = new TestRunner();
  await runner.runAllTests();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { TestRunner };
`;
    
    const runnerPath = path.join(this.testDir, 'test-runner.js');
    fs.writeFileSync(runnerPath, testRunner);
    console.log('‚úÖ Test runner cr√©√©');
  }

  async execCommand(command) {
    return new Promise((resolve, reject) => {
      exec(command, (error, stdout, stderr) => {
        if (error) {
          reject(error);
        } else {
          resolve({ stdout, stderr });
        }
      });
    });
  }

  async setup() {
    console.log('üîß Configuration des Tests Automatis√©s');
    console.log('=====================================');
    
    try {
      // V√©rifier les pr√©requis
      await this.checkPrerequisites();
      
      // Installer les d√©pendances
      await this.installDependencies();
      
      // Cr√©er la structure
      await this.createTestStructure();
      
      // Cr√©er les scripts
      await this.createTestScripts();
      
      // Cr√©er la configuration
      await this.createTestConfig();
      
      // Cr√©er le test runner
      await this.createTestRunner();
      
      console.log('\n‚úÖ Configuration termin√©e !');
      console.log('\nüìã Commandes disponibles:');
      console.log('  npm run test:automated  - Tests automatis√©s');
      console.log('  npm run test:manual    - Tests manuels');
      console.log('  npm run test:all       - Tous les tests');
      console.log('  npm run test:setup     - Reconfigurer');
      
    } catch (error) {
      console.log('‚ùå Erreur lors de la configuration:', error.message);
    }
  }
}

// Ex√©cution
async function main() {
  const setup = new TestSetup();
  await setup.setup();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { TestSetup };
